{
	"info": {
		"_postman_id": "827a7e3c-2030-4fc5-b6a2-9360212d42a8",
		"name": "HW3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) необходимо залогиниться\r",
							"\r",
							"// Приходящий токен необходимо передать во все остальные запросы.\r",
							"var resp = pm.response.json();\r",
							"var resp_token = resp.token;\r",
							"pm.environment.set(\"token\", resp.token);\r",
							"\r",
							"// ===================\r",
							"// дальше все запросы требуют наличие токена.\r",
							"// ===================\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "str",
							"type": "text"
						},
						{
							"key": "password",
							"value": "str",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var resp = pm.response.json()   \r",
							"var req = JSON.parse(request.data);   \r",
							"\r",
							"var schema =\r",
							"{\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\r",
							"        \"person\",\r",
							"        \"qa_salary_after_12_months\",\r",
							"        \"qa_salary_after_6_months\",\r",
							"        \"start_qa_salary\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"person\": {\r",
							"            \"type\": \"object\",\r",
							"            \"required\": [\r",
							"                \"u_age\",\r",
							"                \"u_name\",\r",
							"                \"u_salary_1_5_year\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                \"u_age\": {\r",
							"                    \"type\": \"integer\",\r",
							"                    \"enum\": [34]\r",
							"                },\r",
							"                \"u_name\": {\r",
							"                    \"type\": \"array\",\r",
							"                    \"additionalItems\": false,\r",
							"                    \"items\": {\r",
							"                        \"anyOf\": [\r",
							"                            {\r",
							"                                \"title\": \"The first element of the schema\",\r",
							"                                \"type\": \"string\",\r",
							"                                \"enum\": [\"Luba\"]\r",
							"                            },\r",
							"                            {\r",
							"                                \"type\": \"integer\",\r",
							"                                \"title\": \"The second element of the schema\",\r",
							"                                \"enum\": [1000]\r",
							"                            },\r",
							"                            {\r",
							"                                \"type\": \"integer\",\r",
							"                                \"title\": \"The third element of the schema\",\r",
							"                                \"enum\": [34]\r",
							"                            }\r",
							"                        ]\r",
							"                    }\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\r",
							"                    \"type\": \"integer\",\r",
							"                    \"enum\": [4000]\r",
							"                }\r",
							"            },\r",
							"            \"additionalProperties\": false\r",
							"        },\r",
							"        \"qa_salary_after_12_months\": {\r",
							"            \"type\": \"number\",\r",
							"            \"enum\": [2900]\r",
							"        },\r",
							"        \"qa_salary_after_6_months\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"enum\": [2000]\r",
							"        },\r",
							"        \"start_qa_salary\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"enum\": [1000]\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": false\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid_tv4', function () {\r",
							"pm.expect(tv4.validate(resp, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid_ajv', ()=> {\r",
							"pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент. \r",
							"pm.test(\"qa_salary_after_6_months from response = salary from request*2\", function () {\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(req.salary*2);\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months from response = salary from request*2.9\", function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(req.salary*2.9);\r",
							"});\r",
							"\r",
							"pm.test(\"u_salary_1_5_year from response = salary from request*4\",function (){\r",
							"    pm.expect(resp.person.u_salary_1_5_year).to.eql(req.salary*4);\r",
							"});\r",
							"\r",
							"pm.test(\"start_qa_salary from response = salary from request\",function (){\r",
							"    pm.expect(resp.start_qa_salary).to.eql(req.salary);\r",
							"});\r",
							"\r",
							"// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"pm.environment.set(\"new_salary\", resp.person.u_salary_1_5_year);\r",
							"console.log(\"u_salary_1_5_year\", resp.person.u_salary_1_5_year)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"age\": 34,\r\n\"salary\": 1000,\r\n\"name\": \"Luba\",\r\n\"auth_token\": \"{{token}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "/new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var resp = pm.response.json();\r",
							"var req = request.data;\r",
							"\r",
							"var schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"name\",\r",
							"        \"salary\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"enum\": [34]\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\",\r",
							"            \"enum\": [\"Luba\"]\r",
							"        },\r",
							"        \"salary\": {\r",
							"            \"type\": \"array\",\r",
							"            \"additionalItems\": false,\r",
							"            \"items\": {\r",
							"                \"anyOf\": [\r",
							"                    {\r",
							"                        \"type\": \"integer\",\r",
							"                        \"enum\": [1000]\r",
							"                    },\r",
							"                    {\r",
							"                        \"type\": \"string\",\r",
							"                        \"enum\": [\"2000\"]\r",
							"                    },\r",
							"                         {\r",
							"                        \"type\": \"string\",\r",
							"                        \"enum\": [\"3000\"]\r",
							"                    }\r",
							"                ]\r",
							"            }\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": false\r",
							"}\r",
							"pm.test('Schema is valid_tv4', function () {\r",
							"pm.expect(tv4.validate(resp, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid_ajv', ()=> {\r",
							"pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"pm.test(\"qa_salary_in_response[0] = salary from request\", function (){\r",
							"    pm.expect(resp.salary[0]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_in_response[1] = salary from request*2\", function (){\r",
							"    pm.expect(+resp.salary[1]).to.eql(req.salary*2);\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_in_response[2] = salary from request*3\", function (){\r",
							"    pm.expect(+resp.salary[2]).to.eql(req.salary*3);\r",
							"});\r",
							"\r",
							"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test(\"check resp.salary[2] > resp.salary[1]\", function (){\r",
							"    pm.expect(+resp.salary[2]).to.be.above(+resp.salary[1]);\r",
							"});\r",
							"\r",
							"pm.test(\"check resp.salary[2] > resp.salary[0]\", function () {\r",
							"    pm.expect(+resp.salary[2]).to.be.above(+resp.salary[0]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "34",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Luba",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/new_data",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "/test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var resp = pm.response.json();\r",
							"var req = request.data;\r",
							"\r",
							"var schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"daily_food\",\r",
							"        \"daily_sleep\",\r",
							"        \"name\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"enum\": [34]\r",
							"        },\r",
							"        \"daily_food\": {\r",
							"            \"type\": \"number\",\r",
							"            \"enum\": [req.weight*0.012]\r",
							"        },\r",
							"        \"daily_sleep\": {\r",
							"            \"type\": \"number\",\r",
							"            \"enum\": [req.weight*2.5]\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\",\r",
							"            \"enum\": [\"Luba\"]\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": false\r",
							"};\r",
							"\r",
							"\r",
							"pm.test('Schema is valid_tv4', function () {\r",
							"pm.expect(tv4.validate(resp, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid_ajv', ()=> {\r",
							"pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"pm.test(\"check daily_food coefficient\", function () {\r",
							"    pm.expect(resp.daily_food).to.eql(req.weight*0.012);\r",
							"});\r",
							"\r",
							"pm.test(\"check daily_sleep coefficient\", function () {\r",
							"    pm.expect(resp.daily_sleep).to.eql(req.weight*2.5);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "34",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "48",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Luba",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/test_pet_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "/get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) ---Проверка структуры json в ответе.\r",
							"var resp = pm.response.json();\r",
							"var req = request.data;\r",
							"\r",
							"var schema ={\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"family\",\r",
							"        \"name\",\r",
							"        \"salary\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"string\",\r",
							"            \"enum\": [\"34\"]\r",
							"        },\r",
							"        \"family\": {\r",
							"            \"type\": \"object\",\r",
							"            \"required\": [\r",
							"                \"children\",\r",
							"                \"u_salary_1_5_year\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                \"children\": {\r",
							"                    \"type\": \"array\",\r",
							"                    \"additionalItems\": false,\r",
							"                    \"items\": {\r",
							"                        \"anyOf\": [\r",
							"                            {\r",
							"                                \"type\": \"array\",\r",
							"                                \"additionalItems\": false,\r",
							"                                \"items\": {\r",
							"                                    \"anyOf\": [\r",
							"                                        { \"type\": \"string\"},\r",
							"                                        {\"type\": \"integer\"}\r",
							"                                    ]\r",
							"                                }\r",
							"                            },\r",
							"                            {\r",
							"                                \"additionalItems\": false,\r",
							"                                \"items\": {\r",
							"                                    \"anyOf\": [\r",
							"                                        {\"type\": \"string\"},\r",
							"                                        {\"type\": \"integer\"}\r",
							"                                    ]\r",
							"                                }\r",
							"                            }\r",
							"                        ]\r",
							"                    }\r",
							"                },\r",
							"                \"u_salary_1_5_year\": \r",
							"                    {\"type\": \"integer\",\r",
							"                    \"enum\": [16000]}\r",
							"            },\r",
							"            \"additionalProperties\": false\r",
							"        },\r",
							"        \"name\": \r",
							"            {\"type\": \"string\",\r",
							"            \"enum\": [\"Luba\"]},\r",
							"        \"salary\": \r",
							"            {\"type\": \"integer\",\r",
							"            \"enum\": [4000]}\r",
							"    },\r",
							"    \"additionalProperties\": false\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"pm.test('Schema is valid_tv4', function () {\r",
							"pm.expect(tv4.validate(resp, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid_ajv', ()=> {\r",
							"pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"console.log(tv4)\r",
							"// 3) Проверить что значение поля name = значению переменной name из окружения\r",
							"pm.environment.set(\"name\", \"Luba\");\r",
							"\r",
							"pm.test(\"name from request = name from environment\", function () {\r",
							"    pm.expect(req.name).to.eql(pm.environment.get(\"name\"))\r",
							"})\r",
							"\r",
							"// 4) Проверить что значение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"pm.test(\"age from response = age from request\", function () {\r",
							"    pm.expect(resp.age).to.eql(req.age);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "34",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{new_salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Luba",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "/currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"var resp = pm.response.json();\r",
							"\r",
							"const values = Object.values(resp);\r",
							"console.log(\"values = \", values)\r",
							"\r",
							"const ran = values[parseInt(Math.random() * values.length)];\r",
							"console.log(\"random number = \", ran)\r",
							"\r",
							"// 2) В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"pm.environment.set(\"Cur_id\", ran.Cur_ID);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/currency",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "/curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var resp = pm.response.json();\r",
							"var schema = \r",
							"{\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\r",
							"        \"Cur_Abbreviation\",\r",
							"        \"Cur_ID\",\r",
							"        \"Cur_Name\",\r",
							"        \"Cur_OfficialRate\",\r",
							"        \"Cur_Scale\",\r",
							"        \"Date\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"Cur_Abbreviation\": {\r",
							"            \"type\": \"string\",\r",
							"        },\r",
							"        \"Cur_ID\": {\r",
							"            \"type\": \"integer\",\r",
							"        },\r",
							"        \"Cur_Name\": {\r",
							"            \"type\": \"string\",\r",
							"        },\r",
							"        \"Cur_OfficialRate\": {\r",
							"            \"type\": \"number\",\r",
							"        },\r",
							"        \"Cur_Scale\": {\r",
							"            \"type\": \"integer\",\r",
							"        },\r",
							"        \"Date\": {\r",
							"            \"type\": \"string\"\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": false\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid_tv4', function () {\r",
							"pm.expect(tv4.validate(resp, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid_ajv', ()=> {\r",
							"pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_id}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/curr_byn",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}